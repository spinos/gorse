/*
 *  Noise3.cpp
 *  aloe
 *
 *  Created by jian zhang on 8/9/16.
 *  Copyright 2016 __MyCompanyName__. All rights reserved.
 *
 */

#include "Noise3.h"

namespace alo {

#define lerp(t, a, b) ( a + t * (b - a) )

float Noise3::PermuTable512[512] = { 0.0038555, 0.741849, 0.536082, 0.757941, 0.162099, 0.651077, 0.388819, 0.122957, 0.204677, 0.118263, 0.613947, 0.687788, 0.259157, 0.017685, 0.660464, 0.713184, 0.977118, 0.654513, 0.316403, 0.495935, 0.971251, 0.657196, 0.575559, 0.321348, 0.970748, 0.752996, 0.232252, 0.705641, 0.346073, 0.480345, 0.688626, 0.425698, 0.222278, 0.300478, 0.259408, 0.460146, 0.951555, 0.648311, 0.658872, 0.156232, 0.842343, 0.272819, 0.919789, 0.1015, 0.366273, 0.656106, 0.890537, 0.343391, 0.386388, 0.20694, 0.915179, 0.35764, 0.939988, 0.490738, 0.679071, 0.910737, 0.319504, 0.987092, 0.616378, 0.741346, 0.467438, 0.305004, 0.167128, 0.689716, 0.681334, 0.502305, 0.225631, 0.632889, 0.226385, 0.884503, 0.864974, 0.144581, 0.23309, 0.784762, 0.246082, 0.599447, 0.516637, 0.212388, 0.018607, 0.90311, 0.495181, 0.00955494, 0.260749, 0.435169, 0.500293, 0.0155896, 0.421675, 0.819881, 0.00268209, 0.0380521, 0.561227, 0.470204, 0.418825, 0.804124, 0.235689, 0.100159, 0.382281, 0.461403, 0.808901, 0.608666, 0.421675, 0.749644, 0.753248, 0.654849, 0.610175, 0.0751823, 0.330065, 0.126896, 0.363339, 0.424441, 0.0300059, 0.934289, 0.434079, 0.366524, 0.445227, 0.0101416, 0.382198, 0.866901, 0.905792, 0.38488, 0.980722, 0.542872, 0.930852, 0.399631, 0.346995, 0.166625, 0.575559, 0.805046, 0.703797, 0.46023, 0.489565, 0.20124, 0.209873, 0.318582, 0.931858, 0.820132, 0.469533, 0.261923, 0.0227978, 0.832956, 0.762216, 0.0528036, 0.843014, 0.196295, 0.495097, 0.288325, 0.206437, 0.877294, 0.155226, 0.112312, 0.338027, 0.136032, 0.730953, 0.344648, 0.611432, 0.153717, 0.587042, 0.262761, 0.958847, 0.290839, 0.723074, 0.448412, 0.567932, 0.00871679, 0.766994, 0.49979, 0.828849, 0.31238, 0.761797, 0.927416, 0.145336, 0.599782, 0.0559886, 0.98835, 0.796077, 0.551169, 0.352443, 0.0782835, 0.428464, 0.507753, 0.266365, 0.84226, 0.719554, 0.997318, 0.186992, 0.406756, 0.151119, 0.774034, 0.669516, 0.109966, 0.140726, 0.392591, 0.634146, 0.708658, 0.47716, 0.476909, 0.208449, 0.30601, 0.789288, 0.0460146, 0.233509, 0.0103931, 0.645797, 0.289498, 0.0745956, 0.517643, 0.916436, 0.427039, 0.59601, 0.420753, 0.0105607, 0.938144, 0.263012, 0.805884, 0.935546, 0.525773, 0.212639, 0.162434, 0.37566, 0.88224, 0.348169, 0.516386, 0.350599, 0.982315, 0.300813, 0.82776, 0.534993, 0.585031, 0.209622, 0.400134, 0.631129, 0.5189, 0.486296, 0.352695, 0.884167, 0.636661, 0.946191, 0.800687, 0.0637834, 0.61797, 0.22144, 0.150113, 0.556114, 0.560221, 0.956081, 0.567429, 0.0860783, 0.244489, 0.729863, 0.461738, 0.126729, 0.078032, 0.0538932, 0.553181, 0.136116, 0.354706, 0.38094, 0.746962, 0.939737, 0.666331, 0.147096, 0.646635, 0.185232, 0.709161, 0.0751823, 0.145252, 0.345906, 0.0213729, 0.945939, 0.485458, 0.715112, 0.243148, 0.635571, 0.271226, 0.803369, 0.667421, 0.838739, 0.965217, 0.911994, 0.644372, 0.426955, 0.114492, 0.722488, 0.556617, 0.667672, 0.934373, 0.911323, 0.0486967, 0.681334, 0.926913, 0.790797, 0.904199, 0.649317, 0.976113, 0.613444, 0.724499, 0.121365, 0.0351186, 0.821641, 0.143073, 0.520577, 0.536753, 0.386221, 0.156148, 0.883832, 0.265359, 0.899422, 0.79834, 0.23066, 0.811416, 0.442712, 0.733384, 0.925907, 0.240969, 0.365854, 0.593664, 0.175425, 0.352946, 0.718129, 0.932529, 0.279859, 0.508926, 0.912581, 0.00502892, 0.560808, 0.601794, 0.805297, 0.757941, 0.636912, 0.627022, 0.901014, 0.157489, 0.239544, 0.363004, 0.389406, 0.199145, 0.704216, 0.288827, 0.997486, 0.0106445, 0.176012, 0.516051, 0.819797, 0.102003, 0.75702, 0.185651, 0.771436, 0.0082139, 0.538681, 0.489565, 0.940826, 0.894309, 0.0742603, 0.853407, 0.899338, 0.710921, 0.455201, 0.704719, 0.468863, 0.167882, 0.40751, 0.44573, 0.325371, 0.722823, 0.884503, 0.790546, 0.922052, 0.588718, 0.0794569, 0.995306, 0.599363, 0.331238, 0.511357, 0.495013, 0.433241, 0.26846, 0.680664, 0.280446, 0.276674, 0.219345, 0.84578, 0.29327, 0.113737, 0.920124, 0.222446, 0.0888442, 0.631045, 0.753415, 0.869332, 0.175677, 0.921297, 0.276842, 0.621406, 0.322437, 0.0755176, 0.581762, 0.113067, 0.997569, 0.17048, 0.268293, 0.0686447, 0.845696, 0.599531, 0.580086, 0.340709, 0.108625, 0.924315, 0.0213729, 0.38907, 0.276758, 0.31657, 0.234934, 0.570111, 0.506077, 0.230827, 0.792557, 0.67069, 0.937641, 0.546057, 0.540106, 0.113318, 0.543123, 0.816947, 0.810578, 0.865644, 0.892465, 0.392339, 0.978711, 0.965803, 0.638589, 0.322773, 0.0345319, 0.484285, 0.922303, 0.690386, 0.900763, 0.106697, 0.614701, 0.997988, 0.495851, 0.891459, 0.314559, 0.806554, 0.53734, 0.896404, 0.0373816, 0.40575, 0.567094, 0.975023, 0.0275752, 0.1072, 0.16411, 0.570698, 0, 0.974688, 0.436342, 0.968234, 0.367027, 0.490822, 0.934121, 0.00569944, 0.813595, 0.0444221, 0.565753, 0.811751, 0.810578, 0.4666, 0.918448, 0.425279, 0.464588, 0.490068, 0.392507, 0.854916, 0.296622, 0.92993, 0.75132, 0.409773, 0.411449, 0.394183, 0.384796, 0.439024, 0.501467, 0.54899, 0.00972257, 0.577236, 0.599447, 0.521918, 0.54547, 0.966558, 0.0127399, 0.55536, 0.0480262, 0.902188, 0.599782, 0.613779, 0.789707, 0.41036, 0.156148, 0.783924, 0.911407, 0.620736, 0.274076, 0.303998, 0.551421, 0.646467, 0.309697, 0.302741, 0.0563239, 0.721147, 0.697008, 0.516889, 0.160171};

float Noise3::SampleGrid(const int & x,
							const int & y,
							const int & z)
{
	int gx = x & 7;
	int gy = y & 7;
	int gz = z & 7;
		
	return PermuTable512[(gz<<6) + (gy<<3) + gx];
}

float Noise3::Trilinear(const float & x,
							const float & y,
							const float & z)
{
	int g0x = x>0.f ? x : x-1.f;
	int g0y = y>0.f ? y : y-1.f;
	int g0z = z>0.f ? z : z-1.f;
	
	int g1x = g0x + 1;
	int g1y = g0y + 1;
	int g1z = g0z + 1;
	
	float fx = x - g0x;
	float fy = y - g0y;
	float fz = z - g0z;
	
	float x0 = lerp(fx, SampleGrid(g0x, g0y, g0z), SampleGrid(g1x, g0y, g0z) );
	float x1 = lerp(fx, SampleGrid(g0x, g1y, g0z), SampleGrid(g1x, g1y, g0z) );
	float x2 = lerp(fx, SampleGrid(g0x, g0y, g1z), SampleGrid(g1x, g0y, g1z) );
	float x3 = lerp(fx, SampleGrid(g0x, g1y, g1z), SampleGrid(g1x, g1y, g1z) );
	
	float y0 = lerp(fy, x0, x1);
	float y1 = lerp(fy, x2, x3);
	return lerp(fz, y0, y1);
}

float Noise3::FractalF(const float * v,
						const float * o,
						const float & freq,
						const float & lacunarity,
						const int & octaves,
						const float & gain)
{
	float ox = o[0];
	float oy = o[1];
	float oz = o[2];
	float sx = v[0] * freq + ox;
	float sy = v[1] * freq + oy;
	float sz = v[2] * freq + oz;
	
	float c = Trilinear(sx, sy, sz);
	
	float f = lacunarity, lg = 1.13f + gain * .87f;
	float l = 1.f / lg;
	int i=1;
	for(;i<octaves;++i) {
		sx += ox; ox += oy;
		sy += oy; oy -= oz;
		sz += oz; oz += ox;
		c += (Trilinear(sx*f, sy*f, sz*f) - .5f) * gain * l;
		f *= lacunarity;
		l /= lg;
	}
	return c;
}

/// http://web.cs.wpi.edu/~emmanuel/courses/cs563/S07/talks/dmitriy_janaliyev_noise_wk9_p2.pdf
float Noise3::Fbm(const float * v,
						const float * o,
						const float & freq,
						const int & octaves,
						const float & lacunarity,
						const float & gain)
{ return FractalF(v, o, freq, lacunarity, octaves, gain); }

}